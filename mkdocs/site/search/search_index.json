{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction to Python and llamaIndex Python Programming Language Python is a versatile and powerful programming language known for its simplicity and readability. It is widely used in various domains such as web development, data science, machine learning, and automation. Python's extensive standard library and third-party packages make it a popular choice for developers. Key Features of Python: Easy-to-read syntax Dynamically typed language Extensive standard library Strong community support Cross-platform compatibility llamaIndex Library llamaIndex is a Python library designed for building and working with search indexes. It provides functionalities for indexing and querying documents, enabling efficient search operations in Python applications. Features of llamaIndex: Document indexing and retrieval Query engine for search operations Support for vector store indexes Integration with data retrieval and analysis tasks Scalable and customizable search capabilities","title":"Home"},{"location":"#introduction-to-python-and-llamaindex","text":"","title":"Introduction to Python and llamaIndex"},{"location":"#python-programming-language","text":"Python is a versatile and powerful programming language known for its simplicity and readability. It is widely used in various domains such as web development, data science, machine learning, and automation. Python's extensive standard library and third-party packages make it a popular choice for developers.","title":"Python Programming Language"},{"location":"#key-features-of-python","text":"Easy-to-read syntax Dynamically typed language Extensive standard library Strong community support Cross-platform compatibility","title":"Key Features of Python:"},{"location":"#llamaindex-library","text":"llamaIndex is a Python library designed for building and working with search indexes. It provides functionalities for indexing and querying documents, enabling efficient search operations in Python applications.","title":"llamaIndex Library"},{"location":"#features-of-llamaindex","text":"Document indexing and retrieval Query engine for search operations Support for vector store indexes Integration with data retrieval and analysis tasks Scalable and customizable search capabilities","title":"Features of llamaIndex:"},{"location":"0-visual-studio-code-setup/","text":"VS Code Setup Open Visual Studio Code Launch Visual Studio Code on your system. Open Extensions View Click on the Extensions icon in the Activity Bar on the side of the window or use the shortcut Ctrl+Shift+X to open the Extensions view. Search for Python Extension In the Extensions view, type \"Python\" in the search bar. Look for the \"Python\" extension provided by Microsoft and click on the Install button. Search for Markdown Preview Enhanced Extension In the Extensions view, type \"Markdown Preview Enhanced\" in the search bar. Look for the \"Markdown Preview Enhanced\" extension by Yiyi Wang and click on the Install button. Verify Installation Once installed, you should see the Python and Markdown Preview extensions listed in the Installed Extensions section of the Extensions view. Using the Extensions To use the Python extension, you can now write and run Python code directly in Visual Studio Code. To use the Markdown Preview extension, open a Markdown file ( .md ) and click on the Open Preview button in the editor to see a live preview of the Markdown content. By following these steps, you can easily install the Python extension for Python development and the Markdown Preview extension for previewing Markdown files within Visual Studio Code.","title":"Visual Code Setup"},{"location":"0-visual-studio-code-setup/#vs-code-setup","text":"","title":"VS Code Setup"},{"location":"0-visual-studio-code-setup/#open-visual-studio-code","text":"Launch Visual Studio Code on your system.","title":"Open Visual Studio Code"},{"location":"0-visual-studio-code-setup/#open-extensions-view","text":"Click on the Extensions icon in the Activity Bar on the side of the window or use the shortcut Ctrl+Shift+X to open the Extensions view.","title":"Open Extensions View"},{"location":"0-visual-studio-code-setup/#search-for-python-extension","text":"In the Extensions view, type \"Python\" in the search bar. Look for the \"Python\" extension provided by Microsoft and click on the Install button.","title":"Search for Python Extension"},{"location":"0-visual-studio-code-setup/#search-for-markdown-preview-enhanced-extension","text":"In the Extensions view, type \"Markdown Preview Enhanced\" in the search bar. Look for the \"Markdown Preview Enhanced\" extension by Yiyi Wang and click on the Install button.","title":"Search for Markdown Preview Enhanced Extension"},{"location":"0-visual-studio-code-setup/#verify-installation","text":"Once installed, you should see the Python and Markdown Preview extensions listed in the Installed Extensions section of the Extensions view.","title":"Verify Installation"},{"location":"0-visual-studio-code-setup/#using-the-extensions","text":"To use the Python extension, you can now write and run Python code directly in Visual Studio Code. To use the Markdown Preview extension, open a Markdown file ( .md ) and click on the Open Preview button in the editor to see a live preview of the Markdown content. By following these steps, you can easily install the Python extension for Python development and the Markdown Preview extension for previewing Markdown files within Visual Studio Code.","title":"Using the Extensions"},{"location":"1-project-basic-setup/","text":"Setup Basic Files: Open Visual Studio Code: Launch Visual Studio Code on your system. Open Project Directory: Open the created project directory in Visual Studio Code. Create Data Folder: Inside the project directory, create a data folder to store data files. mkdir data Create .env File: Create a .env file in the project directory to store environment variables. Add the necessary environment variables to the .env file. Note: this is a personal API key, do not share it. OPENAI_API_KEY=sk-proj-YJfIghXUvkuWwAZOgAVcT3BlbkFJSboe6GLdcYRb9AdsIqW3 Create main.py: Create a main.py Python script in the project directory as the main entry point for the project. Create requirements.txt: Create a requirements.txt file in the project directory to list project dependencies. Add the required Python packages and their versions to the requirements.txt file. llama-index==0.10.* python-dotenv==1.* chromadb llama-index-vector-stores-chroma","title":"Project Basic Setup"},{"location":"1-project-basic-setup/#setup-basic-files","text":"","title":"Setup Basic Files:"},{"location":"1-project-basic-setup/#open-visual-studio-code","text":"Launch Visual Studio Code on your system.","title":"Open Visual Studio Code:"},{"location":"1-project-basic-setup/#open-project-directory","text":"Open the created project directory in Visual Studio Code.","title":"Open Project Directory:"},{"location":"1-project-basic-setup/#create-data-folder","text":"Inside the project directory, create a data folder to store data files. mkdir data","title":"Create Data Folder:"},{"location":"1-project-basic-setup/#create-env-file","text":"Create a .env file in the project directory to store environment variables. Add the necessary environment variables to the .env file. Note: this is a personal API key, do not share it. OPENAI_API_KEY=sk-proj-YJfIghXUvkuWwAZOgAVcT3BlbkFJSboe6GLdcYRb9AdsIqW3","title":"Create .env File:"},{"location":"1-project-basic-setup/#create-mainpy","text":"Create a main.py Python script in the project directory as the main entry point for the project.","title":"Create main.py:"},{"location":"1-project-basic-setup/#create-requirementstxt","text":"Create a requirements.txt file in the project directory to list project dependencies. Add the required Python packages and their versions to the requirements.txt file. llama-index==0.10.* python-dotenv==1.* chromadb llama-index-vector-stores-chroma","title":"Create requirements.txt:"},{"location":"2-install-packages/","text":"Install Packages from requirements.txt Navigate to the Project Directory: Open Command Prompt (not Powershell!) and navigate to the directory where your Python project is located. Use the cd command to navigate to the directory where your Python script <file>.py is located or simply use the terminal in Visual Studio Code. Activate the Virtual Environment (Recommended): Virtual environments in Python are used to create isolated environments for Python projects, allowing you to manage dependencies and packages separately for each project. Activate it using the following command: venv\\Scripts\\activate Install Packages from requirements.txt Use pip to install the packages listed in the requirements.txt file: pip install -r requirements.txt Verify Package Installation: Check that the required packages are installed correctly: pip list","title":"Install Packages"},{"location":"2-install-packages/#install-packages-from-requirementstxt","text":"","title":"Install Packages from requirements.txt"},{"location":"2-install-packages/#navigate-to-the-project-directory","text":"Open Command Prompt (not Powershell!) and navigate to the directory where your Python project is located. Use the cd command to navigate to the directory where your Python script <file>.py is located or simply use the terminal in Visual Studio Code.","title":"Navigate to the Project Directory:"},{"location":"2-install-packages/#activate-the-virtual-environment-recommended","text":"Virtual environments in Python are used to create isolated environments for Python projects, allowing you to manage dependencies and packages separately for each project. Activate it using the following command: venv\\Scripts\\activate","title":"Activate the Virtual Environment (Recommended):"},{"location":"2-install-packages/#install-packages-from-requirementstxt_1","text":"Use pip to install the packages listed in the requirements.txt file: pip install -r requirements.txt","title":"Install Packages from requirements.txt"},{"location":"2-install-packages/#verify-package-installation","text":"Check that the required packages are installed correctly: pip list","title":"Verify Package Installation:"},{"location":"3-before-run/","text":"To run a Python script <filename>.py while connected to your own hotspot and with the VPN turned off, follow these instructions: Note: This step only for local development. For production, you can run the script on the server. Turn Off VPN Disconnect from the company VPN to ensure that your network connection is not restricted by the company's network settings. Connect to Your Own Hotspot Connect to your personal hotspot or a different network that does not have restrictions on accessing external services like the OPENAPI.","title":"Before Run Project"},{"location":"3-before-run/#turn-off-vpn","text":"Disconnect from the company VPN to ensure that your network connection is not restricted by the company's network settings.","title":"Turn Off VPN"},{"location":"3-before-run/#connect-to-your-own-hotspot","text":"Connect to your personal hotspot or a different network that does not have restrictions on accessing external services like the OPENAPI.","title":"Connect to Your Own Hotspot"},{"location":"4-run-project/","text":"Run Python Scripts You can now run your Python scripts using the installed packages: python main.py","title":"Run Project"},{"location":"4-run-project/#run-python-scripts","text":"You can now run your Python scripts using the installed packages: python main.py","title":"Run Python Scripts"}]}